CREATE TABLE AUTHOR (
  id INTEGER PRIMARY KEY,
  fName VARCHAR(50) NOT NULL,
  midInit CHAR(1),
  lName VARCHAR(50) NOT NULL
);


CREATE TABLE BOOK (
  ISBN INTEGER(13) PRIMARY KEY,
  genre VARCHAR(40) NOT NULL,
  releaseYear INTEGER NOT NULL CHECK (releaseYear <= 2023),
  size INTEGER CHECK (size >= 0) NOT NULL,
  discount REAL CHECK (discount >= 0 AND discount < 1) NOT NULL DEFAULT 0,
  title VARCHAR(150) NOT NULL,
  price REAL CHECK (price > 0) NOT NULL,
  pubId INTEGER NOT NULL,
  FOREIGN KEY (pubId) REFERENCES PUBLISHER (id) ON UPDATE CASCADE
);


CREATE TABLE BOOK_AUTHOR (
  ISBN INTEGER(13),
  authId NOT NULL,
  PRIMARY KEY (ISBN, authId),
  FOREIGN KEY (ISBN) REFERENCES BOOK (ISBN) ON DELETE CASCADE ON UPDATE CASCADE,
  FOREIGN KEY (authId) REFERENCES AUTHOR (id) ON DELETE CASCADE ON UPDATE CASCADE
);


CREATE TABLE BOOK_ORDER (
  ISBN INTEGER(13) NOT NULL,
  orderId INTEGER NOT NULL,
  PRIMARY KEY (ISBN, orderId),
  FOREIGN KEY (ISBN) REFERENCES BOOK (ISBN) ON UPDATE CASCADE ON DELETE CASCADE,
  FOREIGN KEY (orderId) REFERENCES "ORDER" (id) ON UPDATE CASCADE ON DELETE CASCADE
);


-- represents the book store's bank accounts
CREATE TABLE COMPANY_ACCOUNT (
  name VARCHAR(70) PRIMARY KEY,
  purpose Text NOT NULL
);


CREATE TABLE CUSTOMER (
  email VARCHAR(70) PRIMARY KEY,
  fName VARCHAR(30) NOT NULL,
  lName VARCHAR(50) NOT NULL
);


CREATE TABLE CUSTOMER_PHONE (
  customerEmail VARCHAR(70) PRIMARY KEY,
  phoneNumber TEXT NOT NULL CHECK (phoneNumber LIKE '(___) ___-____'),
  FOREIGN KEY (customerEmail) REFERENCES CUSTOMER (email) ON DELETE CASCADE ON UPDATE CASCADE
);


CREATE TABLE EMPLOYEE (
  ssn TEXT PRIMARY KEY CHECK (ssn Like '___-__-____'),
  fName VARCHAR(30)  NOT NULL,
  lName VARCHAR(50) NOT NULL,
  hWage INTEGER CHECK (hWage >= 0) NOT NULL,
  hWorked INTEGER CHECK (hWorked >= 0) NOT NULL,
  locId INTEGER NOT NULL,
  accountName VARCHAR(70) NOT NULL,
  FOREIGN KEY (accountName) REFERENCES COMPANY_ACCOUNT(name) ON UPDATE CASCADE,
  FOREIGN KEY (locId) REFERENCES LOCATION(id) ON UPDATE CASCADE
);


CREATE TABLE EMPLOYEE_PHONE
(
    essn TEXT PRIMARY KEY CHECK (essn Like '___-__-____'),
    phoneNumber TEXT CHECK (phoneNumber LIKE '(___) ___-____') NOT NULL,
    FOREIGN KEY (essn) REFERENCES EMPLOYEE (ssn) ON UPDATE CASCADE ON DELETE CASCADE
);


CREATE TABLE LOCATION (
  id INTEGER PRIMARY KEY,
  country VARCHAR(50) NOT NULL,
  state VARCHAR(20),
  city VARCHAR(50) NOT NULL,
  zip INT(5) NOT NULL,
  address VARCHAR(100) NOT NULL,
  UNIQUE(country, city, zip, address) ON CONFLICT REPLACE
);



CREATE TABLE MONEY_TRANSFER (
  orderId INTEGER NOT NULL,
  accountName VARCHAR(70) NOT NULL,
  PRIMARY KEY (orderId, accountName),
  FOREIGN KEY (orderId) REFERENCES "ORDER" (id) ON UPDATE CASCADE ON DELETE CASCADE,
  FOREIGN KEY (accountName) REFERENCES COMPANY_ACCOUNT (name) ON UPDATE CASCADE ON DELETE CASCADE
);


-- represents notification a warehouse gets when it needs a book for an order
CREATE TABLE NOTIFY (
  orderId INTEGER NOT NULL,
  wHId INTEGER NOT NULL,
  PRIMARY KEY (orderId, wHId),
  FOREIGN KEY (orderId) REFERENCES "ORDER" (id) ON UPDATE CASCADE ON DELETE CASCADE,
  FOREIGN KEY (wHId) REFERENCES WAREHOUSE (id) ON UPDATE CASCADE ON DELETE CASCADE
);


CREATE TABLE "ORDER" (
  id INTEGER PRIMARY KEY,
  orderDate DATE NOT NULL,
  status TEXT NOT NULL CHECK (status IN ('Delivered', 'In Progress', 'Canceled')),
  deliveryDate DATE,
  discount REAL CHECK (discount >= 0 AND discount < 1) NOT NULL DEFAULT 0,
  customerEmail VARCHAR(70) NOT NULL,
  locId INTEGER NOT NULL,
  FOREIGN KEY (customerEmail) REFERENCES CUSTOMER (email) ON DELETE SET NULL ON UPDATE CASCADE,
  FOREIGN KEY (locId) REFERENCES LOCATION (id) ON DELETE SET NULL ON UPDATE CASCADE,
  --check that orderDate is before delivery
  CONSTRAINT DATECHK CHECK (orderDate <= deliveryDate)
);


CREATE TABLE PUB_LOC (
  pubId INTEGER NOT NULL,
  locId INTEGER NOT NULL,
  PRIMARY KEY (pubId, locId),
  FOREIGN KEY (pubId) REFERENCES PUBLISHER (id) ON UPDATE CASCADE ON DELETE CASCADE,
  FOREIGN KEY (locId) REFERENCES LOCATION (id) ON UPDATE CASCADE ON DELETE CASCADE
);


CREATE TABLE PUB_PHONE (
  pubId INTEGER,
  phoneNumber TEXT CHECK (phoneNumber LIKE '(___) ___-____'),
  role VARCHAR(30) NOT NULL,
  PRIMARY KEY (pubId, phoneNumber),
  FOREIGN KEY (pubId) REFERENCES PUBLISHER (id) ON DELETE CASCADE ON UPDATE CASCADE
);


CREATE TABLE PUBLISHER (
  id INTEGER PRIMARY KEY,
  name VARCHAR(100) NOT NULL
);


-- represents a customer's review of a book
CREATE TABLE REVIEW (
  customerEmail VARCHAR(70) NOT NULL,
  ISBN INTEGER(13) NOT NULL,
  score INTEGER CHECK (score >= 0 AND score <= 10) NOT NULL,
  comment TEXT,
  dateWritten DATE NOT NULL,
  PRIMARY KEY (customerEmail, ISBN),
  FOREIGN KEY(customerEmail) REFERENCES CUSTOMER(email) ON UPDATE CASCADE,
  FOREIGN KEY(ISBN) REFERENCES BOOK(ISBN) ON DELETE CASCADE ON UPDATE CASCADE
);


-- represents a book's inventory in a warehouse
CREATE TABLE STORED (
  ISBN INTEGER(13) NOT NULL,
  wHId INTEGER NOT NULL,
  bCount INTEGER CHECK (bCount >= 0) DEFAULT 0 NOT NULL,
  PRIMARY KEY (ISBN, wHId),
  FOREIGN KEY (ISBN) REFERENCES BOOK (ISBN) ON UPDATE CASCADE ON DELETE CASCADE,
  FOREIGN KEY (wHId) REFERENCES WAREHOUSE (id) ON UPDATE CASCADE ON DELETE CASCADE
);


CREATE TABLE WAREHOUSE (
  id INTEGER PRIMARY KEY,
  space INTEGER CHECK (space > 0) Not NUll,
  locId INTEGER NOT NULL,
  FOREIGN KEY (locId) REFERENCES LOCATION(id) ON UPDATE CASCADE
);


CREATE TABLE WISHLIST (
  customerEmail VARCHAR(70) NOT NULL,
  name VARCHAR(70) NOT NULL,
  privacy TEXT NOT NULL CHECK (privacy IN ('Private', 'Public')),
  PRIMARY KEY (customerEmail, name),
  FOREIGN KEY (customerEmail) REFERENCES CUSTOMER (email) ON DELETE CASCADE ON UPDATE CASCADE
);


-- represents a book in a customer's wishlist
CREATE TABLE WISHLIST_CONTAINS (
  ISBN INTEGER(13) NOT NULL,
  customerEmail VARCHAR(70) NOT NULL,
  name VARCHAR(70) NOT NULL,
  PRIMARY KEY (ISBN, customerEmail, name),
  FOREIGN KEY (ISBN) REFERENCES BOOK (ISBN) ON UPDATE CASCADE ON DELETE CASCADE,
  FOREIGN KEY (customerEmail) REFERENCES CUSTOMER (email) ON UPDATE CASCADE ON DELETE CASCADE,
  FOREIGN KEY (name) REFERENCES WISHLIST (name) ON UPDATE CASCADE ON DELETE CASCADE
);
